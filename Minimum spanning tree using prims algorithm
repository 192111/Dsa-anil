#include <stdio.h>
#include <stdbool.h>
#include <limits.h>

#define MAX_NODES 100

int graph[MAX_NODES][MAX_NODES];

int minKey(int key[], bool mstSet[], int numNodes) {
    int min = INT_MAX, min_index;

    for (int v = 0; v < numNodes; v++)
        if (mstSet[v] == false && key[v] < min)
            min = key[v], min_index = v;

    return min_index;
}

void printMST(int parent[], int n, int graph[MAX_NODES][MAX_NODES]) {
    printf("Edge \tWeight\n");
    for (int i = 1; i < n; i++)
        printf("%d - %d \t%d\n", parent[i], i, graph[i][parent[i]]);
}

void primMST(int graph[MAX_NODES][MAX_NODES], int numNodes) {
    int parent[MAX_NODES]; // Array to store constructed MST
    int key[MAX_NODES];    // Key values used to pick minimum weight edge in cut
    bool mstSet[MAX_NODES]; // To represent set of vertices not yet included in MST

    for (int i = 0; i < numNodes; i++)
        key[i] = INT_MAX, mstSet[i] = false;

    key[0] = 0;         // Make key 0 so that this vertex is picked as first vertex
    parent[0] = -1;     // First node is always root of MST

    for (int count = 0; count < numNodes - 1; count++) {
        int u = minKey(key, mstSet, numNodes);
        mstSet[u] = true;

        for (int v = 0; v < numNodes; v++)
            if (graph[u][v] && mstSet[v] == false && graph[u][v] < key[v])
                parent[v] = u, key[v] = graph[u][v];
    }

    printMST(parent, numNodes, graph);
}

int main() {
    int numNodes;

    printf("Enter the number of nodes: ");
    scanf("%d", &numNodes);

    printf("Enter the adjacency matrix of the graph:\n");
    for (int i = 0; i < numNodes; i++) {
        for (int j = 0; j < numNodes; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    primMST(graph, numNodes);

    return 0;
}
ï¿¼Enter
