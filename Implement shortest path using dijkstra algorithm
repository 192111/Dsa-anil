#include <stdio.h>
#include <stdbool.h>
#include <limits.h>

#define MAX_NODES 100

int graph[MAX_NODES][MAX_NODES];

int minDistance(int dist[], bool sptSet[], int numNodes) {
    int min = INT_MAX, min_index;

    for (int v = 0; v < numNodes; v++)
        if (sptSet[v] == false && dist[v] <= min)
            min = dist[v], min_index = v;

    return min_index;
}

void printSolution(int dist[], int numNodes) {
    printf("Vertex \tDistance from Source\n");
    for (int i = 0; i < numNodes; i++)
        printf("%d \t%d\n", i, dist[i]);
}

void dijkstra(int graph[MAX_NODES][MAX_NODES], int numNodes, int src) {
    int dist[MAX_NODES]; // The output array. dist[i] will hold the shortest distance from src to i
    bool sptSet[MAX_NODES]; // sptSet[i] will be true if vertex i is included in shortest path tree

    for (int i = 0; i < numNodes; i++)
        dist[i] = INT_MAX, sptSet[i] = false;

    dist[src] = 0; // Distance of source vertex from itself is always 0

    for (int count = 0; count < numNodes - 1; count++) {
        int u = minDistance(dist, sptSet, numNodes);

        sptSet[u] = true;

        for (int v = 0; v < numNodes; v++)
            if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v])
                dist[v] = dist[u] + graph[u][v];
    }

    printSolution(dist, numNodes);
}

int main() {
    int numNodes;

    printf("Enter the number of nodes: ");
    scanf("%d", &numNodes);

    printf("Enter the adjacency matrix of the graph:\n");
    for (int i = 0; i < numNodes; i++) {
        for (int j = 0; j < numNodes; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    int source;
    printf("Enter the source node: ");
    scanf("%d", &source);

    dijkstra(graph, numNodes, source);

    return 0;
}
ï¿¼Enter
